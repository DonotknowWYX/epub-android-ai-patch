name: EPUBium Build (Full Fixed)

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  setup_android_sdk:
    runs-on: ubuntu-22.04
    outputs:
      android-sdk-path: ${{ steps.setup_sdk.outputs.android-home }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: sdk-setup
          
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Setup Android SDK
        id: setup_sdk
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: "9.0"  # 改用兼容性更好的旧版本
          
      # 接受所有Android许可证
      - name: Accept licenses
        run: |
          yes | sudo ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses
          
      - name: Install build-tools
        run: |
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "build-tools;29.0.3" "platforms;android-29"
          
      - name: Export SDK path
        run: echo "android-home=${ANDROID_HOME}" >> $GITHUB_OUTPUT

  build_apk:
    needs: setup_android_sdk
    runs-on: ubuntu-22.04
    # 禁用失败重试以获取完整日志
    strategy:
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      - name: Configure SDK
        run: |
          echo "sdk.dir=${{ needs.setup_android_sdk.outputs.android-sdk-path }}" > local.properties
          echo "org.gradle.caching=false" >> gradle.properties  # 禁用缓存
          echo "org.gradle.configureondemand=false" >> gradle.properties  # 禁用按需配置
          
      - name: Clean environment
        run: |
          rm -rf ~/.gradle
          rm -rf .gradle
          rm -rf app/build
          chmod +x gradlew
          ./gradlew clean
          
      - name: Run with full debug
        run: ./gradlew assembleDebug --stacktrace --scan --no-daemon --console=plain
        # 添加详细日志参数
        env:
          GRADLE_OPTS: "-Dorg.gradle.debug=true"
        
      - name: Upload APK on success
        if: success()
        run: |
          mkdir apk-artifact
          cp app/build/outputs/apk/debug/*.apk apk-artifact/
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ job.status }}-apk-artifacts
          path: |
            apk-artifact/
            build/reports/
            .gradle/
            
      # 确保总是收集日志
      - name: Capture build logs
        if: always()
        run: |
          mkdir diagnostic-logs
          find . -name "*.log" -exec cp {} diagnostic-logs/ \;
          cp build/reports/**/* diagnostic-logs/ || true
          
      - name: Upload diagnostic data
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnostic-data
          path: |
            diagnostic-logs/
            gradle.properties
            local.properties
